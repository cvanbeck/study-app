<script>
    $(document).ready(function () {
        // Set the placeholder based on the selected chat mode
        $("#prompt").attr("placeholder", `Message the AI (${$('input[name="mode"]:checked').closest("label").text().trim()})`);

        // Handle the form submission and stream the AI response
        $('#chat-form').on('submit', function (e) {
            e.preventDefault();
            const prompt = $('#prompt').val();
            const chatMode = $('input[name="mode"]:checked').val();
            const thoughtsDefault = $('input[name="thoughtsDefault"]:checked').val();
            const destination = $('input[name="destination"]:checked').val() || 'chat';

            $('#prompt').val("");
            adjustTextareaHeight($('#prompt')[0]);

            const modeText = $('input[name="mode"]:checked').closest("label").text().trim();
            let container=null;
            let messageId='';

            if(destination === 'chat'){
                messageId = 'ai-response-' + Date.now();
                $('#chat-output').append(`
                    <div class="chat-message user-message">
                        <div class="chatboxHeader"><span>You (${modeText}):</span></div>
                        <pre>${escapeHTML(prompt)}</pre>
                    </div>
                    <div id="${messageId}" class="chat-message ai-response">
                        <div class="chatboxHeader"><span>AI (${modeText}):</span></div>
                        <div class="ai-content"></div>
                    </div>
                `);
                updateScroll(300);
                container = document.querySelector(`#${messageId} .ai-content`);
            } else if (destination === 'note'){
                const editor=Quill.find(document.querySelector('#editor'));
                if (editor) {
                    const endIndex = editor.getLength();
                    editor.insertText(endIndex, `You: ${prompt}\n`);
                    const aiIndex = editor.getLength();
                    editor.insertText(aiIndex, `AI: \n`);
                    window.aiResponseIndex = aiIndex;
                    if (window.socket && typeof window.socket.emit === 'function'){
                        const delta = editor.getContents();
                        window.socket.emit('text-change', delta);
                    }
                }
            }
            var lastFullContent = '';
            var receivedLength = 0;
            var finalUpdateDone = false;

            $.ajax({
                url: '/chat/getChatResponse',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ prompt: prompt, mode: chatMode, destination: destination
                }),
                xhr: function () {
                    var xhr = new window.XMLHttpRequest();
                    xhr.responseType = 'text';
                    xhr.addEventListener('progress', function () {
                        if (destination == 'note' || chatMode === 'quizmaster') {
                            return;
                        }
                        const chunk = xhr.responseText.substring(receivedLength);
                        receivedLength = xhr.responseText.length;
                        const lines = chunk.split('\n');
                        lines.forEach(function (line) {
                            if (line.indexOf("data: ") === 0) {
                                const jsonPart = line.substring(6);
                                if (jsonPart === "[DONE]") return;
                                if (jsonPart.trim().endsWith('"}')) {
                                    try {
                                        // Ensure the JSON is properly formatted by replacing unescaped newlines
                                        const sanitizedJsonPart = jsonPart.replace(/\n/g, "\\n").replace(/\r/g, "\\r");

                                        const parsedData = JSON.parse(sanitizedJsonPart);
                                        if (parsedData.fullContent) {
                                            lastFullContent = parsedData.fullContent;
                                            if(destination ==='chat'){
                                                renderFullResponse(lastFullContent, container, false);
                                                updateScroll();
                                            }
                                        }
                                    } catch (e) {
                                        console.error("Error parsing streamed data:", e, jsonPart);
                                    }
                                }
                            }
                        });
                    });
                    xhr.addEventListener('loadend', function () {
                        if (finalUpdateDone) return;
                        if(!this.responseText||!this.responseText.trim()){
                            console.log("Empty response");
                            return;
                        }
                        finalUpdateDone = true;    
                        if (chatMode === 'quizmaster' && !lastFullContent) {
                            lastFullContent = this.responseText;
                        }
                        console.log("Raw response: ", this.responseText);
                        const processed = processAIContent(lastFullContent);
                        let displayContent = processed.visible.trim();
                        displayContent = displayContent.replace(/\\+"$/, "").trim();
                        if (chatMode === 'quizmaster'){
                            const match = displayContent.match(/Quiz Question:\s*(.*?)(?:\s*Correct Answer:|$)/i);
                            if (match && match[1]){
                                displayContent = match[1].trim();
                            }
                        }
                        if (!displayContent){
                            console.log("Empty");
                            return;
                        }
                        if (destination === 'chat'){
                            renderFullResponse(displayContent, container, true);
                        } else if (destination === 'note') {
                            updateNoteWithAIResponse(displayContent, true, chatMode);
                        }
                        console.log("final displaycontent:", displayContent);
                    });
                    return xhr;
                },
                error: function (err) {
                    alert('An error occurred while streaming the response.');
                    console.error(err);

                    if (destination === 'note') {
                        const editor = Quill.find(document.querySelector('#editor'));
                        if (editor) {
                            const text = editor.getText();
                            const typingIndex = text.lastIndexOf('AI is typing...');
                            if (typingIndex !== -1) {
                                editor.deleteText(typingIndex, 'AI is typing...'.length);
                                editor.insertText(typingIndex, 'AI: Error occurred while fetching response');

                                if (window.socket && typeof window.socket.emit === 'function') {
                                    const delta = editor.getContents();
                                    window.socket.emit('text-change', delta);
                                }
                            }
                        }
                    }
                }
            });
        });
        function updateNoteWithAIResponse(content, isFinal=false, chatMode) {
            console.log("rawAI: ", content);
            const processedContent = processAIContent(content);
            console.log("procAI: ", processedContent);

            let visibleContent = processedContent.visible.trim();
            if (visibleContent.startsWith('"') && visibleContent.endsWith('"')) {
                visibleContent = visibleContent.substring(1, visibleContent.length -1).trim();
            }
            const editorElement = document.querySelector('#editor')
            const editor = Quill.find(editorElement);
            if (!editor) return;

            if (typeof window.aiResponseIndex !== 'undefined'){
                const aiIndex = window.aiResponseIndex;
                const currentLength = editor.getLength();
                editor.deleteText(aiIndex, currentLength - aiIndex);
                editor.insertText(aiIndex, `AI: ${visibleContent}\n`);
            } else {
                const currentLength = editor.getLength();
                editor.insertText(currentLength, `AI: ${visibleContent}\n`);
            }
            if (window.socket && typeof window.socket.emit === 'function') {
                const delta = editor.getContents();
                window.socket.emit('text-change', delta);
                
            }
        }

        // Adjust textarea height on keydown and input events
        $('#prompt').on('keydown', function (e) {
            adjustTextareaHeight(this);
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                $('#chat-form').submit();
            }
        });
        $('#prompt').on('input', function () {
            adjustTextareaHeight(this);
        });
        adjustTextareaHeight($('#prompt')[0]);
    });
</script>
