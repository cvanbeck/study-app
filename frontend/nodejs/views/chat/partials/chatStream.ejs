<script type="module">
    window.quizCorrectAnswer = null;
    window.lastQuizQuestion = null;
    window.lastQuizAnsweredBy = null;
    window.chatMode = null;
</script>

<script>
    $(document).ready(function () {
        // Set the placeholder based on the selected chat mode
        $("#prompt").attr("placeholder", `Message the AI (${$('input[name="mode"]:checked').closest("label").text().trim()})`);

        // Handle the form submission and stream the AI response
        $('#chat-form').on('submit', function (e) {
            e.preventDefault();
            const prompt = $('#prompt').val().trim();
            if(!prompt) return;
            const mode = $('input[name="mode"]:checked').val();
            if (window.chatMode === "quizmaster" && mode !== "quizmaster") {
                $.post("/chat/reset-quiz-state");
            }
            window.chatMode = mode;
            const thoughtsDefault = $('input[name="thoughtsDefault"]:checked').val();
            const destination = $('input[name="destination"]:checked').val() || 'chat';

            $('#prompt').val("");
            adjustTextareaHeight($('#prompt')[0]);

            const modeText = $('input[name="mode"]:checked').closest("label").text().trim();
            let container=null;
            let messageId='';

            if(destination === 'chat'){
                messageId = 'ai-response-' + Date.now();
                $('#chat-output').append(`
                    <div class="chat-message user-message">
                        <div class="chatboxHeader"><span>You (${modeText}):</span></div>
                        <pre>${escapeHTML(prompt)}</pre>
                    </div>
                    <div id="${messageId}" class="chat-message ai-response">
                        <div class="chatboxHeader"><span>AI (${modeText}):</span></div>
                        <div class="ai-content"></div>
                    </div>
                `);
                updateScroll(300);
                container = document.querySelector(`#${messageId} .ai-content`);
            } else if (destination === 'note'){
                const editor=Quill.find(document.querySelector('#editor'));
                if (editor) {
                    const endIndex = editor.getLength();
                    editor.insertText(endIndex, `You: ${prompt}\n`);
                    const aiIndex = editor.getLength();
                    editor.insertText(aiIndex, `AI: \n`);
                    $('#prompt').val('');
                    window.aiResponseIndex = aiIndex;
                    if (window.socket && typeof window.socket.emit === 'function'){
                        const delta = editor.getContents();
                        window.socket.emit('text-change', delta);
                    }
                }
            }
            let lastFullContent = '';
            let receivedLength = 0;
            let finalUpdateDone = false;
            let partialTextArrived = false;

            $.ajax({
                url: '/chat/getChatResponse',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ prompt: prompt, mode: mode, destination: destination
                }),
                xhr: function () {
                    var xhr = new window.XMLHttpRequest();
                    xhr.responseType = 'text';
                    xhr.addEventListener('progress', function () {
                        if (destination == 'note' || mode === 'quizmaster') return;
                        const chunk = xhr.responseText.substring(receivedLength);
                        receivedLength = xhr.responseText.length;
                        try {
                            const lines = xhr.responseText.split('\n');
                            let latestFullContent = "";
                        
                            for (let i = lines.length - 1; i >= 0; i--) {
                                const line = lines[i].trim();
                                if (!line || line === "[DONE]") continue;
                            
                                try {
                                    const parsed = JSON.parse(line);
                                    if (parsed && parsed.fullContent !== undefined) {
                                        latestFullContent = parsed.fullContent;
                                        break;
                                    }
                                } catch (e) {
                                    continue;
                                }
                            }
                        
                            if (latestFullContent && container) {
                                const processed = {
                                    thoughts: "",
                                    visible: latestFullContent.replace(/<think>[\s\S]*?<\/think>/g, "").trim(),
                                    question: "",
                                    answer: ""
                                };
                                container.innerHTML = '';
                                const visibleContentDiv = document.createElement('div');
                                visibleContentDiv.className = 'markdown-content';
                                visibleContentDiv.innerHTML = processed.visible;
                                container.appendChild(visibleContentDiv);
                                updateScroll();
                            
                                lastFullContent = latestFullContent;
                                partialTextArrived = true;
                            }
                        } catch (e) {
                            console.error("Error handling streaming response:", e);
                        }
                    });
                
                    xhr.addEventListener('loadend', function () {
                        console.log("Raw responseText:", this.responseText);
                        if (finalUpdateDone) return;
                        finalUpdateDone = true;
                        let finalContent = lastFullContent;
                        if (!finalContent) {
                            try {
                                const lines = this.responseText.split('\n');
                                console.log("Parsed lines:", lines);
                                for (let i = 0; i < lines.length; i++) {
                                    for (let i = 0; i < lines.length; i++) {
                                        const line = lines[i].trim();
                                        if (!line || line === "data: [DONE]") continue;
                                        let jsonPart = line;
                                        if (line.startsWith("data: ")) {
                                            jsonPart = line.substring(6);
                                        }
                                        try {
                                            const parsed = JSON.parse(jsonPart);
                                            if (parsed && parsed.fullContent) {
                                                finalContent = parsed.fullContent;
                                                break;
                                            }
                                        } catch (e) {
                                            console.error("Failed to parse line:", line, e);
                                        }
                                    }
                                }
                            } catch (e) {
                                console.error("Error extracting final content:", e);
                            }
                        }
                        console.log("Final content extracted for note mode:", finalContent);

                        if (finalContent) {
                            const processed = processAIContent(finalContent);
    
                            if (mode === 'quizmaster') {
                                window.lastQuizQuestion = processed.question;
                                window.quizCorrectAnswer = processed.answer;
                            }

                            if (destination === 'chat' && container) {
                                container.innerHTML = '';
                                const visibleContentDiv = document.createElement('div');
                                visibleContentDiv.className = 'markdown-content';
                                visibleContentDiv.innerHTML = processed.visible;
                                container.appendChild(visibleContentDiv);
                                updateScroll();
                            }

                            if (destination === 'note') {
                                updateNoteWithAIResponse(processed, true, mode);
                            }

                            console.log("Final visible content:", processed.visible);
                            console.log("Correct answer set to:", window.quizCorrectAnswer);
                        }
                    });
                    return xhr;
                },
                error: function (err) {
                    alert('An error occurred while streaming the response.');
                    console.error(err);

                    if (destination === 'note') {
                        const editor = Quill.find(document.querySelector('#editor'));
                        if (editor) {
                            const text = editor.getText();
                            const typingIndex = text.lastIndexOf('AI is typing...');
                            if (typingIndex !== -1) {
                                editor.deleteText(typingIndex, 'AI is typing...'.length);
                                editor.insertText(typingIndex, 'AI: Error occurred while fetching response');

                                if (window.socket && typeof window.socket.emit === 'function') {
                                    const delta = editor.getContents();
                                    window.socket.emit('text-change', delta);
                                }
                            }
                        }
                    }
                }
            });
            function updateNoteWithAIResponse(processedContent, isFinal=false, mode) {
                if (mode === 'quizmaster') {
                    window.lastQuizQuestion = processedContent.question;
                    window.quizCorrectAnswer = processedContent.answer;
                }
                let visibleContent = processedContent.visible.trim();
                if (visibleContent.startsWith('"') && visibleContent.endsWith('"')) {
                    visibleContent = visibleContent.substring(1, visibleContent.length -1).trim();
                }
                const editorElement = document.querySelector('#editor')
                const editor = Quill.find(editorElement);
                if (!editor) return;

                if (typeof window.aiResponseIndex !== 'undefined'){
                    const aiIndex = window.aiResponseIndex;
                    const currentLength = editor.getLength();
                    editor.deleteText(aiIndex, currentLength - aiIndex);
                    editor.insertText(aiIndex, `AI: ${visibleContent}\n`);
                } else {
                    const currentLength = editor.getLength();
                    editor.insertText(currentLength, `AI: ${visibleContent}\n`);
                }
                if (window.socket && typeof window.socket.emit === 'function') {
                    const delta = editor.getContents();
                    window.socket.emit('text-change', delta);
                
                }
            }
            adjustTextareaHeight($('#prompt')[0]);
        });

        // Adjust textarea height on keydown and input events
        $('#prompt').on('keydown', function (e) {
            adjustTextareaHeight(this);
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                $('#chat-form').submit();
            }
        });
        $('#prompt').on('input', function () {
            adjustTextareaHeight(this);
        });
        adjustTextareaHeight($('#prompt')[0]);
    });
</script>
