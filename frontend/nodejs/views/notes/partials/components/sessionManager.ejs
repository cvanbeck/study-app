<script>
    // -----------------------------
    // Session Management
    // -----------------------------
    const SessionManager = {
        async createSession() {
            if (typeof State.currentSession !== 'string') {
                WebSocketManager.disconnect();
                try {
                    const sessionCode = await API.generateSession(State.currentID);

                    UI.updateSessionDisplay(sessionCode, true);
                    State.currentSession = sessionCode;

                    // Update URL with session parameter
                    window.history.pushState("", "", window.location.pathname + `?id=${State.currentID}` + `&session=${sessionCode}`);

                    WebSocketManager.connect();

                    WebSocketManager.sendMessage('newSession', sessionCode);
                } catch (error) {
                    console.error('Error creating session:', error);
                }
            }
        },

        promptJoinSession() {
            UI.promptForID('Enter Session Code', async (sessionCode) => {
                if (typeof sessionCode === 'string' && sessionCode.length === 7) {
                    WebSocketManager.disconnect();
                    await SessionManager.joinSession(sessionCode);
                } else {
                    throw 'Invalid Code';
                }
            });
        },

        async joinSession(sessionCode) {
            try {
                const data = await API.joinSession(sessionCode);

                if (data.page !== window.location.pathname) {
                    window.location.assign(data.page + `?id=${data.note.id}` + `&session=${sessionCode}`);
                } else {
                    Editor.setContent(data.note);

                    // Update URL and session state
                    window.history.pushState("", "", window.location.pathname + `?id=${data.note.id}` + `&session=${sessionCode}`);
                    State.currentSession = sessionCode;
                    UI.updateSessionDisplay(sessionCode, true);

                    WebSocketManager.connect();
                    //UI.toggleSessionButton(true);
                    UI.toggleEditorOverlay(true);
                }
            } catch (error) {
                console.error('Error joining session:', error);
                throw error;
            }
        },

        async loadSessionNote() {
            try {
                const data = await API.joinSession(State.currentSession);

                if (data.page !== window.location.pathname) {
                    window.location.assign(data.page + `?id=${data.note.id}` + `&session=${State.currentSession}`);
                } else {
                    Editor.setContent(data.note);
                    WebSocketManager.connect();
                }

                if(new URLSearchParams(window.location.search).get('id') !== data.note.id) {
                    window.history.pushState("", "", window.location.pathname + `?id=${data.note.id}` + `&session=${State.currentSession}`);
                }

                //UI.toggleSessionButton(true);
                UI.toggleEditorOverlay(true);
            } catch (error) {
                console.error('Error loading session note:', error);
            }
        },

        async endSession() {
            try {
                await API.endSession(State.currentID, State.currentSession);
                WebSocketManager.endSession();
                SessionManager.cleanupAfterSessionEnd();
            } catch (error) {
                console.error('Error ending session:', error);
                throw error;
            }
        },

        cleanupAfterSessionEnd() {
            WebSocketManager.disconnect();
            State.currentSession = null;
            window.history.pushState("", "", window.location.pathname + `?id=${State.currentID}`);
        }
    };
</script>