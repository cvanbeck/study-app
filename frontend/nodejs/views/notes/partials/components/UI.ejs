<script>
    // -----------------------------
    // UI Management
    // -----------------------------
    const UI = {
        init() {
            this.setupButtonHandlers();
            this.initializeSession();
        },

        showConfirmAlert(title, text, confirmCallback) {
            return this.showAlert({
                title,
                text,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes',
                cancelButtonText: 'No',
            }).then(result => {
                if (result.isConfirmed) {
                    confirmCallback();
                }
            });
        },

        showVersionAlert(title, preConfirmCallback) {
            if (!State.currentID) {
                return this.showAlert({
                    icon: 'warning',
                    title: 'No note selected',
                    text: 'Please create or load a note first'
                });
            }

            return this.showAlert({
                title,
                input: "text",
                showCloseButton: true,
                width: '600px',
                preConfirm: preConfirmCallback
            });
        },

        // Check if the URL contains specific parameters
        hasUrlParameter(param) {
            const urlParams = new URLSearchParams(window.location.search);
            return urlParams.has(param);
        },

        toggleEditorOverlay(hide) {
            $('#editorOverlay').toggle(!hide);
        },

        updateSessionDisplay(sessionCode, active = true) {
            $('#sessionCode')
                .html(sessionCode)
                .toggleClass('bg-secondary', !active)
                .toggleClass('bg-primary', active);
        },

        showAlert(options) {
            return Swal.fire(options);
        },

        showVersionAlert(title, preConfirmCallback) {
            if (!State.currentID) {
                return this.showAlert({
                    icon: 'warning',
                    title: 'No note selected',
                    text: 'Please create or load a note first'
                });
            }

            return this.showAlert({
                title,
                input: "text",
                showCloseButton: true,
                width: '600px',
                preConfirm: preConfirmCallback
            });
        },

        promptForID(title, text, callback) {
            this.showAlert({
                title,
                text,
                input: "text",
                showCloseButton: true,
                showCancelButton: true,
                confirmButtonText: 'Confirm',
                width: '600px',
                preConfirm: async (result) => {
                    try {
                        await callback(result);
                    } catch (error) {
                        Swal.showValidationMessage(error);
                    }
                }
            });
        },

        showSessionEndAlert() {
            return this.showAlert({
                    icon: 'warning',
                    title: 'Collaborative Session has ended',
                });
        },

        setupButtonHandlers() {
            // Duplicate overlay buttons
            $('#newNoteOverlayButton').on('click', () => $('#newNoteButton').click());
            $('#loadNoteOverlayButton').on('click', () => $('#loadNoteButton').click());

            // Primary functionality buttons
            $('#newNoteButton').on('click', () => {
                // Show confirm box only if URL has 'id' parameter
                if (this.hasUrlParameter('id')) {
                    this.showConfirmAlert(
                        'Are you sure you want to start a new note?',
                        'Make sure to save your note ID first',
                        NoteManager.createNewNote
                    );
                } else {
                    NoteManager.createNewNote();
                }
            });
            $('#loadNoteButton').on('click', NoteManager.promptLoadExistingNote);
            
            // Create Collab Session button confirmation
            $('#sessionButton').on('click', () => {
                // Show confirm box only if URL has 'session' parameter
                if (this.hasUrlParameter('session')) {
                    this.showConfirmAlert(
                        'Are you sure you want to start a new Collab Session?',
                        'Your current session will be lost',
                       async function(){
                            await SessionManager.endSession();
                            await SessionManager.createSession();
                        }
                    );
                } else {
                    SessionManager.createSession();
                }
            });

            $('#endSessionButton').on('click', () => {
                // Show confirm box only if URL has 'session' parameter
                if (this.hasUrlParameter('session')) {
                    this.showConfirmAlert(
                        'Are you sure you want to end the Collab Session?',
                        'Your current session will be lost',
                        SessionManager.endSession
                    );
                }
            });
            $('#joinButton').on('click', SessionManager.promptJoinSession);
            $('#versionControlAlertButton').on('click', VersionManager.promptViewVersion);
            $('#currentNoteButton').on('click', VersionManager.returnToCurrentVersion);
            $('#deleteAlertButton').on('click', VersionManager.promptDeleteVersion);
        },

        initializeSession() {
            if (typeof State.currentSession === 'string') {
                SessionManager.loadSessionNote(); // Session code takes precedence over note ID
                this.updateSessionDisplay(State.currentSession);
            } else if (typeof State.currentID === 'string') {
                NoteManager.loadExistingNote(State.currentID);
            }
        }
    };
</script>